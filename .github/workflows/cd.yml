name: CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  AZURE_WEBAPP_NAME: '${{ vars.AZURE_WEBAPP_NAME }}'
  AZURE_RESOURCE_GROUP: '${{ vars.AZURE_RESOURCE_GROUP }}'
  DOCKER_IMAGE_NAME: '${{ vars.DOCKER_USERNAME }}/fiap-cloud-games'
  DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # - name: Debug Variables (for troubleshooting)
    #   run: |
    #     echo "Azure WebApp Name: ${{ env.AZURE_WEBAPP_NAME }}"
    #     echo "Azure Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
    #     echo "Docker Username: ${{ env.DOCKER_USERNAME }}"
    #     echo "Docker Image: ${{ env.DOCKER_IMAGE_NAME }}"
    #     echo "JWT Issuer: ${{ vars.JWT_ISSUER }}"
    #     echo "Loki URI: ${{ vars.LOKI_URI }}"
    #     echo "Secrets are hidden, but checking if they exist:"
    #     echo "Azure SQL Connection String exists: ${{ secrets.AZURE_SQL_CONNECTION_STRING != '' }}"
    #     echo "JWT Key exists: ${{ secrets.JWT_KEY != '' }}"
    #     echo "Docker Password exists: ${{ secrets.DOCKER_PASSWORD != '' }}"
    #     echo "Azure Credentials exists: ${{ secrets.AZURE_CREDENTIALS != '' }}"
    #     echo "Azure Publish Profile exists: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE != '' }}"

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build and publish
      run: |
        dotnet build --configuration Release --no-restore
        dotnet publish -c Release -o ./publish --no-build

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE_NAME }}:latest .
        docker tag ${{ env.DOCKER_IMAGE_NAME }}:latest ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

    - name: Push Docker image
      run: |
        docker push ${{ env.DOCKER_IMAGE_NAME }}:latest
        docker push ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # - name: Deploy sql
    # run: az containerapp create 
    #      --name sqlserver-app 
    #     --resource-group FiapCG 
    #     --environment managedEnvironment-FiapCG-a7c8 
    #     --image mcr.microsoft.com/mssql/server:2022-latest 
    #     --target-port 1433 
    #     --ingress internal 
    #     --env-vars ACCEPT_EULA=Y SA_PASSWORD=P@ssw0rdF1@PT3ch MSSQL_PID=Express

    - name: Deploy App
      run: az containerapp create 
          --name cloud-games-cont02 
          --resource-group "Fase-3" 
          --environment managedEnvironment-Fase-3
          --image docker.io/ulric650/fiap-cloud-games:${{ github.sha }}
          --ingress external 
          --target-port 8080 
          --env-vars ASPNETCORE_ENVIRONMENT=Development ConnectionStrings__DefaultConnection="Server=fiap-fase-3.database.windows.net,1433;Initial Catalog=FIAPCloudGames;Persist Security Info=False;User ID=FIAPCloudGames;Password=P@ssw0rdF1@PT3ch;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"


   # - name: Deploy Grafana
   #   run: az containerapp create 
    #      --name grafana-app 
    #      --resource-group FiapCG 
   #       --environment managedEnvironment-FiapCG-a7c8 
   #       --image grafana/grafana:latest 
   #       --target-port 3000 
   #       --ingress external 
   #       --env-vars GF_SECURITY_ADMIN_PASSWORD=admin

   # - name: Deploy Prometheus
   #   run: az containerapp create 
   #       --name prometheus-app 
   #       --resource-group FiapCG 
   #       --environment managedEnvironment-FiapCG-a7c8 
   #       --image prom/prometheus:latest 
   #       --target-port 9090 
   #       --ingress external 
   #       --env-vars PROMETHEUS_CONFIG=/etc/prometheus/prometheus.yml 

   # - name: Deploy Loki
   #   run: az containerapp create 
   #       --name loki-app 
   #       --resource-group FiapCG 
   #       --environment managedEnvironment-FiapCG-a7c8 
   #       --image grafana/loki:latest 
   #       --target-port 3100 
   #       --ingress external


      
    
